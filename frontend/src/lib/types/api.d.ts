/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api": {
    /** Read Root */
    get: operations["read_root_api_get"];
  };
  "/api/add": {
    /**
     * Add New Data 
     * @description adds data in request to datav
     */
    get: operations["add_new_data_api_add_get"];
  };
  "/api/clear": {
    /**
     * Clear Data 
     * @description clears datav
     */
    get: operations["clear_data_api_clear_get"];
  };
  "/api/pop": {
    /**
     * Pop Data 
     * @description pops last element from datav
     */
    get: operations["pop_data_api_pop_get"];
  };
  "/api/auth/register": {
    /**
     * Register 
     * @description registers a user with the given username and password
     */
    post: operations["register_api_auth_register_post"];
  };
  "/api/auth/login": {
    /**
     * Login 
     * @description logs in a user with the given username and password
     */
    post: operations["login_api_auth_login_post"];
  };
  "/api/auth/info": {
    /**
     * Get User Info 
     * @description gets the user info for the given username
     */
    get: operations["get_user_info_api_auth_info_get"];
  };
  "/api/auth/dev/clear": {
    /**
     * Clear Users 
     * @description clears all users - for development purposes only
     */
    get: operations["clear_users_api_auth_dev_clear_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Data */
    Data: {
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Read Root */
  read_root_api_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Add New Data 
   * @description adds data in request to datav
   */
  add_new_data_api_add_get: {
    parameters: {
      query: {
        data: unknown;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Clear Data 
   * @description clears datav
   */
  clear_data_api_clear_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Pop Data 
   * @description pops last element from datav
   */
  pop_data_api_pop_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Register 
   * @description registers a user with the given username and password
   */
  register_api_auth_register_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Data"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": string | boolean;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Login 
   * @description logs in a user with the given username and password
   */
  login_api_auth_login_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Data"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string | boolean;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User Info 
   * @description gets the user info for the given username
   */
  get_user_info_api_auth_info_get: {
    parameters: {
      query: {
        token: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never> | boolean;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Clear Users 
   * @description clears all users - for development purposes only
   */
  clear_users_api_auth_dev_clear_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
